import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler,
} from 'chart.js';
import { Line } from 'react-chartjs-2';
import { useTheme } from '../../context/ThemeContext';
import { useEffect, useState } from 'react';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler
);

interface VulnerabilityChartProps {
  isLoading?: boolean;
}

const VulnerabilityChart = ({ isLoading = false }: VulnerabilityChartProps) => {
  const { theme } = useTheme();
  const [chartData, setChartData] = useState<any>(null);

  useEffect(() => {
    // Simulated data for the chart
    const mockDates = Array.from({ length: 14 }, (_, i) => {
      const date = new Date();
      date.setDate(date.getDate() - (13 - i));
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
    });

    const criticalData = [3, 5, 2, 6, 7, 8, 5, 9, 8, 7, 9, 8, 10, 12];
    const highData = [8, 10, 14, 12, 10, 9, 11, 13, 15, 12, 14, 16, 18, 15];
    const mediumData = [20, 18, 15, 22, 24, 21, 19, 23, 25, 22, 20, 24, 22, 26];
    const lowData = [30, 28, 32, 34, 30, 28, 32, 35, 32, 30, 32, 34, 30, 28];

    const isDark = theme === 'dark';
    const gridColor = isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
    const textColor = isDark ? 'rgba(255, 255, 255, 0.8)' : 'rgba(0, 0, 0, 0.8)';

    const options = {
      responsive: true,
      maintainAspectRatio: false,
      interaction: {
        mode: 'index' as const,
        intersect: false,
      },
      plugins: {
        legend: {
          position: 'top' as const,
          labels: {
            boxWidth: 10,
            usePointStyle: true,
            color: textColor,
          },
        },
        tooltip: {
          enabled: true,
          backgroundColor: isDark ? 'rgba(23, 23, 23, 0.8)' : 'rgba(255, 255, 255, 0.8)',
          titleColor: isDark ? 'rgba(255, 255, 255, 0.9)' : 'rgba(0, 0, 0, 0.9)',
          bodyColor: isDark ? 'rgba(255, 255, 255, 0.8)' : 'rgba(0, 0, 0, 0.8)',
          borderColor: isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',
          borderWidth: 1,
          cornerRadius: 4,
          padding: 8,
        },
      },
      scales: {
        x: {
          grid: {
            display: false,
          },
          ticks: {
            color: textColor,
          },
        },
        y: {
          grid: {
            color: gridColor,
          },
          ticks: {
            color: textColor,
          },
          border: {
            dash: [4, 4],
          },
        },
      },
    };

    const data = {
      labels: mockDates,
      datasets: [
        {
          label: 'Critical',
          data: criticalData,
          borderColor: '#ef4444',
          backgroundColor: 'rgba(239, 68, 68, 0.1)',
          borderWidth: 2,
          fill: true,
          tension: 0.4,
          pointRadius: 0,
          pointHoverRadius: 4,
          pointBackgroundColor: '#ef4444',
          pointHoverBackgroundColor: '#ef4444',
        },
        {
          label: 'High',
          data: highData,
          borderColor: '#f97316',
          backgroundColor: 'rgba(249, 115, 22, 0.1)',
          borderWidth: 2,
          fill: true,
          tension: 0.4,
          pointRadius: 0,
          pointHoverRadius: 4,
          pointBackgroundColor: '#f97316',
          pointHoverBackgroundColor: '#f97316',
        },
        {
          label: 'Medium',
          data: mediumData,
          borderColor: '#fbbf24',
          backgroundColor: 'rgba(251, 191, 36, 0.1)',
          borderWidth: 2,
          fill: true,
          tension: 0.4,
          pointRadius: 0,
          pointHoverRadius: 4,
          pointBackgroundColor: '#fbbf24',
          pointHoverBackgroundColor: '#fbbf24',
        },
        {
          label: 'Low',
          data: lowData,
          borderColor: '#10b981',
          backgroundColor: 'rgba(16, 185, 129, 0.1)',
          borderWidth: 2,
          fill: true,
          tension: 0.4,
          pointRadius: 0,
          pointHoverRadius: 4,
          pointBackgroundColor: '#10b981',
          pointHoverBackgroundColor: '#10b981',
        },
      ],
    };

    setChartData({ options, data });
  }, [theme]);

  if (isLoading) {
    return (
      <div className="h-full w-full flex items-center justify-center">
        <div className="h-40 w-full bg-muted/20 rounded animate-pulse"></div>
      </div>
    );
  }

  return chartData ? (
    <Line options={chartData.options} data={chartData.data} />
  ) : null;
};

export default VulnerabilityChart;